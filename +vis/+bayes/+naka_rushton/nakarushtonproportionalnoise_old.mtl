#include <metal_stdlib>
using namespace metal;

constant float PI = 3.141592653589793;

kernel void nakaRushtonProportionalNoiseLog(
    device float *lik [[ buffer(0) ]],
    constant float *contrast_response_numtrials [[ buffer(1) ]],
    constant float *grid [[ buffer(2) ]], 
    constant float *noise_model [[ buffer(3) ]], 
    device float *answers [[ buffer(4) ]],
    uint id[[ thread_position_in_grid ]])
{

   // extract grid dimensions 
   uint num_r100 = grid[0];
   uint num_c50 = grid[1];
   uint num_n = grid[2];
   uint num_s = grid[3];

   uint num_contrasts = contrast_response_numtrials[0];
   float f_eval,Rm,c,r,numtrials,noise_sigma,lik_here,log_likelihood=0;
   float c_high_res[101];
   float r_high_res[101], r_high_res_max = -100000;
   float rmg = -100000, gain, sat_index, cthresh;
   uint ci, ci_high_res_max=0, ci_thresh = 1000;

   for (ci=0; ci<101; ci++) c_high_res[ci] = ci/100.0;

   uint lik_is_zero = 0;

   // find the index of each grid point to evaluate

   uint index_r100 = id % num_r100;
   uint index_c50 = (id / num_r100) % num_c50;
   uint index_n = id / (num_c50 * num_r100) % num_n;
   uint index_s = id / (num_n * num_c50 * num_r100) % num_s;

   // grab the value of each variable

   float r100 = grid[4+index_r100];
   float c50  = grid[4+num_r100+index_c50];
   float n    = grid[4+num_r100+num_c50+index_n];
   float s    = grid[4+num_r100+num_c50+num_n+index_s];

   Rm = r100 * (1+pow(c50,n));
   for (uint i=0; i<num_contrasts;i++) {
      c = abs(contrast_response_numtrials[1+i]);
      r = contrast_response_numtrials[1+num_contrasts+i];
      numtrials = contrast_response_numtrials[1+2*num_contrasts+i];
      f_eval = Rm * pow(c,n) / (pow(c50,n*s) + pow(c,n*s));
      if (c<0) f_eval *= -1;
      else if (c==0) f_eval = 0; 
      answers[i] = f_eval;
      if (noise_model[0] == 1) {
        noise_sigma = pow(10,noise_model[2]) * pow(f_eval,noise_model[3])/sqrt(numtrials);
      } else {
        noise_sigma = (noise_model[1] + noise_model[2] * pow(f_eval,noise_model[3]))/sqrt(numtrials);
      }
      answers[11+i] = noise_sigma;
      if (noise_sigma>0) {
        lik_here = exp(-pow((f_eval-r),2)/(2*noise_sigma*noise_sigma))/(noise_sigma*sqrt(2*PI));
        answers[22+i] = lik_here;
        log_likelihood += log10(lik_here);
      } else {
        lik_is_zero = 1;
        answers[22+i] = 10;
        break;
      }
   }
   lik[id] = lik_is_zero ? 10 : log_likelihood;

   numtrials = contrast_response_numtrials[1+2*num_contrasts]; // take first as representative
   // now calculate index values here
   for (ci=0;ci<101;ci++) {
      r_high_res[ci] = Rm * pow(c_high_res[ci],n) / (pow(c50,n*s) + pow(c_high_res[ci],n*s));
      if (c_high_res[ci]<0) r_high_res[ci] *= -1;
      else if (c_high_res[ci]==0) r_high_res[ci] = 0;

      if (noise_model[0] == 1) {
        noise_sigma = pow(10,noise_model[2]) * pow(r_high_res[ci],noise_model[3])/sqrt(numtrials);
      } else {
        noise_sigma = (noise_model[1] + noise_model[2] * pow(r_high_res[ci],noise_model[3]))/sqrt(numtrials);
      }
      if ((ci_thresh == 1000) && (r_high_res[ci] >= 2 * noise_sigma)) ci_thresh = ci;

      if (r_high_res[ci] > r_high_res_max) {
          r_high_res_max = r_high_res[ci];
          ci_high_res_max = ci;
      }
      if (ci>0) {
          gain = (r_high_res[ci]-r_high_res[ci-1]) / (c_high_res[ci] - c_high_res[ci-1]);
          if (gain>rmg) rmg = gain;
      }
   }
   sat_index = (r_high_res_max - r_high_res[100]) / r_high_res[100]; 
   if (ci_thresh != 1000) cthresh = c_high_res[ci_thresh];
   else cthresh = 101;
}


